import { coordinate2D } from './blob.types';
export default class BlobInstance {
    points: Array<Point>;
    ctx: CanvasRenderingContext2D | undefined | null;
    _color: string;
    _mousePos: coordinate2D;
    _canvas: HTMLCanvasElement | undefined;
    _points: number;
    _radius: number;
    _position: coordinate2D;
    _running: boolean;
    _smoothing: boolean;
    _markers: boolean;
    _showMousePosition: boolean;
    _speed: number;
    _friction: number;
    _elasticity: number;
    _acceleration: number;
    _radial: number;
    constructor(initColor?: string, numPoints?: number, smooth?: boolean, marks?: boolean, initShowMousePosition?: boolean, initSpeed?: number, initFriction?: number, initElasticity?: number, initAcceleration?: number, initRadial?: number);
    init(): void;
    render(): void;
    push(item: Point): void;
    set color(value: string);
    get color(): string;
    set smoothing(value: boolean);
    get smoothing(): boolean;
    get friction(): number;
    get elasticity(): number;
    get acceleration(): number;
    get radial(): number;
    set markers(value: boolean);
    get markers(): boolean;
    get speed(): number;
    set showMousePosition(value: boolean);
    get showMousePosition(): boolean;
    set mousePos(value: coordinate2D);
    get mousePos(): coordinate2D;
    set canvas(value: HTMLCanvasElement | undefined);
    get canvas(): HTMLCanvasElement | undefined;
    set numPoints(value: number);
    get numPoints(): number;
    set radius(value: number);
    get radius(): number;
    set position(value: coordinate2D);
    get position(): coordinate2D;
    get divisional(): number;
    get center(): coordinate2D;
    set running(value: boolean);
    get running(): boolean;
}
export declare class Point {
    parent: BlobInstance;
    azimuth: number;
    _acceleration: number;
    _components: {
        x: number;
        y: number;
    };
    _speed: number;
    _radialEffect: number;
    _elasticity: number;
    _friction: number;
    constructor(azimuth: number, parent: BlobInstance);
    solveWith(leftPoint: Point, rightPoint: Point): void;
    set acceleration(value: number);
    get acceleration(): number;
    set speed(value: number);
    get speed(): number;
    set radialEffect(value: number);
    get radialEffect(): number;
    get position(): coordinate2D;
    get components(): coordinate2D;
    set elasticity(value: number);
    get elasticity(): number;
    set friction(value: number);
    get friction(): number;
}
