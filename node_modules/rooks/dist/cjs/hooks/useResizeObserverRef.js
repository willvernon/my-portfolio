'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var noop = require('../utils/noop.js');
var react = require('react');
var useFreshTick = require('./useFreshTick.js');

const config = {
    box: "content-box",
};
/**
 *
 * useResizeObserverRef hook
 *
 * Returns a resize observer for a React Ref and fires a callback
 * https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver
 *
 * @param {ResizeObserverCallback} callback Function that needs to be fired on resize
 * @param {ResizeObserverOptions} options An options object allowing you to set options for the observation
 * @returns {[CallbackRef]} callbackref
 * @see https://react-hooks.org/docs/useResizeObserverRef
 */
function useResizeObserverRef(callback, options = config) {
    const [node, setNode] = react.useState(null);
    const freshCallback = useFreshTick.useFreshTick(callback);
    react.useEffect(() => {
        if (node) {
            // Create an observer instance linked to the callback function
            const observer = new ResizeObserver(freshCallback);
            // Start observing the target node for resizes
            observer.observe(node, options);
            return () => {
                observer.disconnect();
            };
        }
        return noop.noop;
    }, [node, freshCallback, options]);
    const ref = react.useCallback((node) => {
        setNode(node);
    }, []);
    return [ref];
}

exports.useResizeObserverRef = useResizeObserverRef;
