import debounce from 'lodash.debounce';
import { useCallback, useRef, useEffect } from 'react';

/**
 * Debounce hook
 * Debounces a function
 *
 * @param callback The callback to debounce
 * @param wait The duration to debounce
 * @param options The options object.
 * @param options.leading Specify invoking on the leading edge of the timeout.
 * @param options.maxWait The maximum time func is allowed to be delayed before itâ€™s invoked.
 * @param options.trailing Specify invoking on the trailing edge of the timeout.
 * @returns Returns the new debounced function.
 * @see https://react-hooks.org/docs/useDebounce
 */
function useDebounce(callback, wait, options) {
    const createDebouncedCallback = useCallback((function_) => {
        return debounce(function_, wait, options);
    }, [wait, options]);
    const debouncedCallbackRef = useRef(createDebouncedCallback(callback));
    useEffect(() => {
        debouncedCallbackRef.current = createDebouncedCallback(callback);
        return () => { var _a; return (_a = debouncedCallbackRef.current) === null || _a === void 0 ? void 0 : _a.cancel(); };
    }, [callback, createDebouncedCallback]);
    return debouncedCallbackRef.current;
}

export { useDebounce };
