import { useState, useEffect, useCallback } from 'react';
import { noop } from '../utils/noop.js';

const config = {
    root: null,
    rootMargin: "0px 0px 0px 0px",
    threshold: [0, 1],
};
/**
 *
 * useIntersectionObserverRef hook
 *
 * Returns a mutation observer for a React Ref and fires a callback
 *
 * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation
 * @param {IntersectionObserverInit} options
 * @see https://react-hooks.org/docs/useIntersectionObserverRef
 */
function useIntersectionObserverRef(callback, options = config) {
    const { root = null, rootMargin, threshold } = options;
    const [node, setNode] = useState(null);
    useEffect(() => {
        // Create an observer instance linked to the callback function
        if (node && callback) {
            const observer = new IntersectionObserver(callback, options);
            // Start observing the target node for configured mutations
            observer.observe(node);
            return () => {
                observer.disconnect();
            };
        }
        return noop;
    }, [node, callback, root, rootMargin, threshold, options]);
    const ref = useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    return [ref];
}

export { useIntersectionObserverRef };
