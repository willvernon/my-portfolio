{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAwD;AACxD,0DAAkC;AAClC,mCAYiB;AAcjB,IAAM,iBAAiB,GAAG,UAAC,EASlB;IARL,IAAA,QAAQ,cAAA,EACR,OAAO,aAAA,EACP,YAAS,EAAT,IAAI,mBAAG,EAAE,KAAA,EACT,qBAAqB,EAArB,aAAa,mBAAG,KAAK,KAAA,EACrB,yBAAwB,EAAxB,iBAAiB,mBAAG,IAAI,KAAA,EACxB,eAAc,EAAd,OAAO,mBAAG,IAAI,KAAA,EACd,iBAAqB,EAArB,SAAS,mBAAG,SAAS,KAAA,EAClB,UAAU,cARU,6FAS1B,CADgB;IAEP,IAAA,KAAA,OAAwB,gBAAQ,CAAC,KAAK,CAAC,IAAA,EAAtC,OAAO,QAAA,EAAE,UAAU,QAAmB,CAAA;IACvC,IAAA,KAAA,OAA0C,gBAAQ,CAAC,aAAa,CAAC,IAAA,EAAhE,gBAAgB,QAAA,EAAE,mBAAmB,QAA2B,CAAA;IAEvE,IAAM,WAAW,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAE5C,iBAAS,CAAC;QACN,IAAI,gBAAgB,EAAE;YAClB,UAAU,CAAC,IAAI,CAAC,CAAA;YAChB,UAAU,CAAC;gBACP,UAAU,CAAC,KAAK,CAAC,CAAA;YACrB,CAAC,EAAE,IAAI,CAAC,CAAA;SACX;QACD,OAAO,mBAAmB,CAAC,KAAK,CAAC,CAAA;IACrC,CAAC,EAAE,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAA;IAE/B,OAAO,CACH,8BAAC,wBAAe,aAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,WAAW,IAAM,UAAU;QACpE,8BAAC,eAAM,IAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EACzD,OAAO,EACH,CAAC,OAAO;gBACJ,CAAC,CAAC;oBACE,QAAQ,EAAE,CAAA;oBACV,UAAU,CAAC,IAAI,CAAC,CAAA;oBAChB,IAAI,iBAAiB,EAAE;wBACnB,UAAU,CAAC;4BACP,UAAU,CAAC,KAAK,CAAC,CAAA;wBACrB,CAAC,EAAE,IAAI,CAAC,CAAA;qBACX;yBAAM;wBACH,UAAU,CAAC,KAAK,CAAC,CAAA;qBACpB;gBACL,CAAC;gBACD,CAAC,CAAC,IAAI;YAEd,8BAAC,uBAAc;gBACX,8BAAC,eAAM,OAAG;gBACV,8BAAC,cAAK;oBACF,8BAAC,aAAI,OAAG;oBACR,8BAAC,aAAI,OAAG;oBACR,8BAAC,aAAI,OAAG;oBACR,8BAAC,4BAAmB;wBAChB,8BAAC,qBAAY,OAAG,CACE,CAClB;gBACR,8BAAC,eAAM;oBACH,8BAAC,cAAK;wBACF,8BAAC,kBAAS,OAAG;wBACb,8BAAC,kBAAS,OAAG,CACT;oBACR,8BAAC,cAAK;wBACF,8BAAC,kBAAS,OAAG;wBACb,8BAAC,kBAAS,OAAG,CACT;oBACR,8BAAC,cAAK;wBACF,8BAAC,kBAAS,OAAG;wBACb,8BAAC,kBAAS,OAAG;wBACb,8BAAC,kBAAS,OAAG,CACT,CACH,CACI,CACZ,CACK,CACrB,CAAA;AACL,CAAC,CAAA;AAED,iBAAiB,CAAC,SAAS,GAAG;IAC1B,QAAQ,EAAE,oBAAS,CAAC,IAAI,CAAC,UAAU;IACnC,OAAO,EAAE,oBAAS,CAAC,IAAI,CAAC,UAAU;IAClC,IAAI,EAAE,oBAAS,CAAC,MAAM;IACtB,aAAa,EAAE,oBAAS,CAAC,IAAI;IAC7B,iBAAiB,EAAE,oBAAS,CAAC,IAAI;IACjC,OAAO,EAAE,oBAAS,CAAC,IAAI;IACvB,SAAS,EAAE,oBAAS,CAAC,MAAM;CAC9B,CAAA;AAED,iBAAiB,CAAC,YAAY,GAAG;IAC7B,QAAQ,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IACpB,OAAO,EAAE,KAAK;IACd,IAAI,EAAE,EAAE;IACR,aAAa,EAAE,KAAK;IACpB,iBAAiB,EAAE,IAAI;IACvB,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,SAAS;CACvB,CAAA;AAED,IAAM,aAAa,GAAG,UAAC,SAAiB,EAAE,SAAiB;IACvD,OAAA,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO;QACvC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI;QACjC,SAAS,CAAC,aAAa,KAAK,SAAS,CAAC,aAAa;QACnD,SAAS,CAAC,iBAAiB,KAAK,SAAS,CAAC,iBAAiB;QAC3D,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO;QACvC,SAAS,CAAC,SAAS,KAAK,SAAS,CAAC,SAAS;AAL3C,CAK2C,CAAA;AAE/C,kBAAe,YAAI,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAA","sourcesContent":["import React, { useState, useEffect, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    Switch,\n    SwitchContainer,\n    ContentWrapper,\n    Circle,\n    Star,\n    Stars,\n    ShootingStar,\n    ShootingStarWrapper,\n    Cloud,\n    Clouds,\n    Cloudpart\n} from './styles'\n\n\ninterface IProps {\n    onChange: () => void,\n    checked: boolean,\n    size?: number,\n    startInactive?: boolean,\n    animationInactive?: boolean,\n    shadows?: boolean,\n    className?: string | undefined,\n    [props: string]: any\n}\n\nconst DayAndNightToggle = ({\n    onChange,\n    checked,\n    size = 32,\n    startInactive = false,\n    animationInactive = true,\n    shadows = true,\n    className = undefined,\n    ...labelProps\n}: IProps) => {\n    const [disable, setDisable] = useState(false)\n    const [startingInactive, setStartingInactive] = useState(startInactive)\n\n    const roundedSize: number = Math.floor(size)\n\n    useEffect(() => {\n        if (startingInactive) {\n            setDisable(true)\n            setTimeout(() => {\n                setDisable(false)\n            }, 2000)\n        }\n        return setStartingInactive(false)\n    }, [checked, startingInactive])\n\n    return (\n        <SwitchContainer className={className} size={roundedSize} {...labelProps}>\n            <Switch shadows={shadows} size={roundedSize} checked={checked}\n                onClick={\n                    !disable\n                        ? () => {\n                            onChange()\n                            setDisable(true)\n                            if (animationInactive) {\n                                setTimeout(() => {\n                                    setDisable(false)\n                                }, 2000)\n                            } else {\n                                setDisable(false)\n                            }\n                        }\n                        : null\n                }>\n                <ContentWrapper>\n                    <Circle />\n                    <Stars>\n                        <Star />\n                        <Star />\n                        <Star />\n                        <ShootingStarWrapper>\n                            <ShootingStar />\n                        </ShootingStarWrapper>\n                    </Stars>\n                    <Clouds>\n                        <Cloud>\n                            <Cloudpart />\n                            <Cloudpart />\n                        </Cloud>\n                        <Cloud>\n                            <Cloudpart />\n                            <Cloudpart />\n                        </Cloud>\n                        <Cloud>\n                            <Cloudpart />\n                            <Cloudpart />\n                            <Cloudpart />\n                        </Cloud>\n                    </Clouds>\n                </ContentWrapper>\n            </Switch>\n        </SwitchContainer>\n    )\n}\n\nDayAndNightToggle.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    size: PropTypes.number,\n    startInactive: PropTypes.bool,\n    animationInactive: PropTypes.bool,\n    shadows: PropTypes.bool,\n    className: PropTypes.string,\n}\n\nDayAndNightToggle.defaultProps = {\n    onChange: () => null,\n    checked: false,\n    size: 32,\n    startInactive: false,\n    animationInactive: true,\n    shadows: true,\n    className: undefined,\n}\n\nconst propsAreEqual = (prevProps: IProps, nextProps: IProps) =>\n    prevProps.checked === nextProps.checked &&\n    prevProps.size === nextProps.size &&\n    prevProps.startInactive === nextProps.startInactive &&\n    prevProps.animationInactive === nextProps.animationInactive &&\n    prevProps.shadows === nextProps.shadows &&\n    prevProps.className === nextProps.className\n\nexport default memo(DayAndNightToggle, propsAreEqual)"]}