import { useEffect, useLayoutEffect, useState } from 'react';

/**
 * useIsomorphicEffect
 * Resolves to useEffect when "window" is not in scope and useLayout effect in the browser
 * @param {function} callback Callback function to be called on mount
 */
const useIsomorphicEffect = typeof window === "undefined" ? useEffect : useLayoutEffect;

const nullDimensions = {
    innerWidth: null,
    innerHeight: null,
    outerWidth: null,
    outerHeight: null
};
function getDimensions() {
    return {
        innerWidth: window.innerWidth,
        innerHeight: window.innerHeight,
        outerWidth: window.outerWidth,
        outerHeight: window.outerHeight
    };
}
/**
 * useWindowSize hook
 * A hook that provides information of the dimensions of the window
 * @return Dimensions of the window
 */
function useWindowSize() {
    const [windowSize, setWindowSize] = useState(() => {
        if (typeof window !== "undefined") {
            return getDimensions();
        }
        else {
            return nullDimensions;
        }
    });
    // set resize handler once on mount and clean before unmount
    useIsomorphicEffect(() => {
        function onResize() {
            setWindowSize(getDimensions());
        }
        window.addEventListener("resize", onResize);
        return () => {
            window.removeEventListener("resize", onResize);
        };
    }, []);
    return windowSize;
}

export default useWindowSize;
//# sourceMappingURL=index.esm.js.map
